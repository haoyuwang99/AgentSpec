# Generated from ./AgentSpec.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,257,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,141,
        8,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
        1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,3,23,208,8,23,1,24,4,24,211,8,24,11,24,12,24,212,1,24,1,24,
        1,25,1,25,5,25,219,8,25,10,25,12,25,222,9,25,1,26,1,26,5,26,226,
        8,26,10,26,12,26,229,9,26,1,26,1,26,1,27,4,27,234,8,27,11,27,12,
        27,235,1,28,4,28,239,8,28,11,28,12,28,240,1,28,1,28,5,28,245,8,28,
        10,28,12,28,248,9,28,1,28,1,28,4,28,252,8,28,11,28,12,28,253,3,28,
        256,8,28,1,227,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,1,0,4,3,0,9,10,13,
        13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,270,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,
        0,0,0,3,64,1,0,0,0,5,72,1,0,0,0,7,78,1,0,0,0,9,84,1,0,0,0,11,92,
        1,0,0,0,13,96,1,0,0,0,15,100,1,0,0,0,17,104,1,0,0,0,19,109,1,0,0,
        0,21,115,1,0,0,0,23,140,1,0,0,0,25,142,1,0,0,0,27,144,1,0,0,0,29,
        146,1,0,0,0,31,148,1,0,0,0,33,150,1,0,0,0,35,152,1,0,0,0,37,154,
        1,0,0,0,39,156,1,0,0,0,41,158,1,0,0,0,43,160,1,0,0,0,45,162,1,0,
        0,0,47,207,1,0,0,0,49,210,1,0,0,0,51,216,1,0,0,0,53,223,1,0,0,0,
        55,233,1,0,0,0,57,255,1,0,0,0,59,60,5,114,0,0,60,61,5,117,0,0,61,
        62,5,108,0,0,62,63,5,101,0,0,63,2,1,0,0,0,64,65,5,116,0,0,65,66,
        5,114,0,0,66,67,5,105,0,0,67,68,5,103,0,0,68,69,5,103,0,0,69,70,
        5,101,0,0,70,71,5,114,0,0,71,4,1,0,0,0,72,73,5,113,0,0,73,74,5,117,
        0,0,74,75,5,101,0,0,75,76,5,114,0,0,76,77,5,121,0,0,77,6,1,0,0,0,
        78,79,5,99,0,0,79,80,5,104,0,0,80,81,5,101,0,0,81,82,5,99,0,0,82,
        83,5,107,0,0,83,8,1,0,0,0,84,85,5,101,0,0,85,86,5,110,0,0,86,87,
        5,102,0,0,87,88,5,111,0,0,88,89,5,114,0,0,89,90,5,99,0,0,90,91,5,
        101,0,0,91,10,1,0,0,0,92,93,5,97,0,0,93,94,5,99,0,0,94,95,5,116,
        0,0,95,12,1,0,0,0,96,97,5,97,0,0,97,98,5,110,0,0,98,99,5,121,0,0,
        99,14,1,0,0,0,100,101,5,118,0,0,101,102,5,97,0,0,102,103,5,108,0,
        0,103,16,1,0,0,0,104,105,5,116,0,0,105,106,5,114,0,0,106,107,5,117,
        0,0,107,108,5,101,0,0,108,18,1,0,0,0,109,110,5,102,0,0,110,111,5,
        97,0,0,111,112,5,108,0,0,112,113,5,115,0,0,113,114,5,101,0,0,114,
        20,1,0,0,0,115,116,5,101,0,0,116,117,5,110,0,0,117,118,5,100,0,0,
        118,22,1,0,0,0,119,120,5,103,0,0,120,141,5,116,0,0,121,122,5,108,
        0,0,122,141,5,116,0,0,123,124,5,101,0,0,124,141,5,113,0,0,125,126,
        5,103,0,0,126,127,5,101,0,0,127,141,5,113,0,0,128,129,5,108,0,0,
        129,130,5,101,0,0,130,141,5,113,0,0,131,132,5,108,0,0,132,133,5,
        108,0,0,133,134,5,109,0,0,134,135,5,95,0,0,135,136,5,106,0,0,136,
        137,5,117,0,0,137,138,5,100,0,0,138,139,5,103,0,0,139,141,5,101,
        0,0,140,119,1,0,0,0,140,121,1,0,0,0,140,123,1,0,0,0,140,125,1,0,
        0,0,140,128,1,0,0,0,140,131,1,0,0,0,141,24,1,0,0,0,142,143,5,58,
        0,0,143,26,1,0,0,0,144,145,5,44,0,0,145,28,1,0,0,0,146,147,5,40,
        0,0,147,30,1,0,0,0,148,149,5,41,0,0,149,32,1,0,0,0,150,151,5,123,
        0,0,151,34,1,0,0,0,152,153,5,125,0,0,153,36,1,0,0,0,154,155,5,91,
        0,0,155,38,1,0,0,0,156,157,5,93,0,0,157,40,1,0,0,0,158,159,5,64,
        0,0,159,42,1,0,0,0,160,161,5,61,0,0,161,44,1,0,0,0,162,163,5,105,
        0,0,163,164,5,110,0,0,164,165,5,118,0,0,165,166,5,111,0,0,166,167,
        5,107,0,0,167,168,5,101,0,0,168,169,5,95,0,0,169,170,5,97,0,0,170,
        171,5,99,0,0,171,172,5,116,0,0,172,173,5,105,0,0,173,174,5,111,0,
        0,174,175,5,110,0,0,175,46,1,0,0,0,176,177,5,117,0,0,177,178,5,115,
        0,0,178,179,5,101,0,0,179,180,5,114,0,0,180,181,5,95,0,0,181,182,
        5,105,0,0,182,183,5,110,0,0,183,184,5,115,0,0,184,185,5,112,0,0,
        185,186,5,101,0,0,186,187,5,99,0,0,187,188,5,116,0,0,188,189,5,105,
        0,0,189,190,5,111,0,0,190,208,5,110,0,0,191,192,5,108,0,0,192,193,
        5,108,0,0,193,194,5,109,0,0,194,195,5,95,0,0,195,196,5,115,0,0,196,
        197,5,101,0,0,197,198,5,108,0,0,198,199,5,102,0,0,199,200,5,95,0,
        0,200,201,5,114,0,0,201,202,5,101,0,0,202,203,5,102,0,0,203,204,
        5,108,0,0,204,205,5,101,0,0,205,206,5,99,0,0,206,208,5,116,0,0,207,
        176,1,0,0,0,207,191,1,0,0,0,208,48,1,0,0,0,209,211,7,0,0,0,210,209,
        1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,214,
        1,0,0,0,214,215,6,24,0,0,215,50,1,0,0,0,216,220,7,1,0,0,217,219,
        7,2,0,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,
        1,0,0,0,221,52,1,0,0,0,222,220,1,0,0,0,223,227,5,34,0,0,224,226,
        9,0,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,228,1,0,0,0,227,225,
        1,0,0,0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,5,34,0,0,231,54,
        1,0,0,0,232,234,7,3,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,
        1,0,0,0,235,236,1,0,0,0,236,56,1,0,0,0,237,239,7,3,0,0,238,237,1,
        0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,242,1,
        0,0,0,242,246,5,46,0,0,243,245,7,3,0,0,244,243,1,0,0,0,245,248,1,
        0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,256,1,0,0,0,248,246,1,
        0,0,0,249,251,5,46,0,0,250,252,7,3,0,0,251,250,1,0,0,0,252,253,1,
        0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,238,1,
        0,0,0,255,249,1,0,0,0,256,58,1,0,0,0,11,0,140,207,212,220,227,235,
        240,246,253,255,1,6,0,0
    ]

class AgentSpecLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    RULE = 1
    TRIGGER = 2
    QUERY = 3
    CHECK = 4
    ENFORCE = 5
    ACTION = 6
    ANY = 7
    VAL = 8
    TRUE = 9
    FALSE = 10
    END = 11
    EVAL_OP = 12
    COLON = 13
    COMMA = 14
    LPAREN = 15
    RPAREN = 16
    LBRACE = 17
    RBRACE = 18
    LBRACK = 19
    RBRACK = 20
    AT = 21
    EQ = 22
    INVOKE = 23
    ENFORCEMENT = 24
    WS = 25
    IDENTIFIER = 26
    STRING = 27
    INTEGER = 28
    FLOAT = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'rule'", "'trigger'", "'query'", "'check'", "'enforce'", "'act'", 
            "'any'", "'val'", "'true'", "'false'", "'end'", "':'", "','", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "'@'", "'='", "'invoke_action'" ]

    symbolicNames = [ "<INVALID>",
            "RULE", "TRIGGER", "QUERY", "CHECK", "ENFORCE", "ACTION", "ANY", 
            "VAL", "TRUE", "FALSE", "END", "EVAL_OP", "COLON", "COMMA", 
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
            "AT", "EQ", "INVOKE", "ENFORCEMENT", "WS", "IDENTIFIER", "STRING", 
            "INTEGER", "FLOAT" ]

    ruleNames = [ "RULE", "TRIGGER", "QUERY", "CHECK", "ENFORCE", "ACTION", 
                  "ANY", "VAL", "TRUE", "FALSE", "END", "EVAL_OP", "COLON", 
                  "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                  "RBRACK", "AT", "EQ", "INVOKE", "ENFORCEMENT", "WS", "IDENTIFIER", 
                  "STRING", "INTEGER", "FLOAT" ]

    grammarFileName = "AgentSpec.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


