# Generated from spec_lang/AgentSpec.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,249,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,3,22,200,8,22,1,23,4,23,203,8,23,11,
        23,12,23,204,1,23,1,23,1,24,1,24,5,24,211,8,24,10,24,12,24,214,9,
        24,1,25,1,25,5,25,218,8,25,10,25,12,25,221,9,25,1,25,1,25,1,26,4,
        26,226,8,26,11,26,12,26,227,1,27,4,27,231,8,27,11,27,12,27,232,1,
        27,1,27,5,27,237,8,27,10,27,12,27,240,9,27,1,27,1,27,4,27,244,8,
        27,11,27,12,27,245,3,27,248,8,27,1,219,0,28,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,1,0,4,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,260,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        1,57,1,0,0,0,3,62,1,0,0,0,5,70,1,0,0,0,7,76,1,0,0,0,9,84,1,0,0,0,
        11,88,1,0,0,0,13,93,1,0,0,0,15,99,1,0,0,0,17,103,1,0,0,0,19,105,
        1,0,0,0,21,107,1,0,0,0,23,109,1,0,0,0,25,111,1,0,0,0,27,113,1,0,
        0,0,29,115,1,0,0,0,31,117,1,0,0,0,33,119,1,0,0,0,35,121,1,0,0,0,
        37,123,1,0,0,0,39,125,1,0,0,0,41,127,1,0,0,0,43,142,1,0,0,0,45,199,
        1,0,0,0,47,202,1,0,0,0,49,208,1,0,0,0,51,215,1,0,0,0,53,225,1,0,
        0,0,55,247,1,0,0,0,57,58,5,114,0,0,58,59,5,117,0,0,59,60,5,108,0,
        0,60,61,5,101,0,0,61,2,1,0,0,0,62,63,5,116,0,0,63,64,5,114,0,0,64,
        65,5,105,0,0,65,66,5,103,0,0,66,67,5,103,0,0,67,68,5,101,0,0,68,
        69,5,114,0,0,69,4,1,0,0,0,70,71,5,99,0,0,71,72,5,104,0,0,72,73,5,
        101,0,0,73,74,5,99,0,0,74,75,5,107,0,0,75,6,1,0,0,0,76,77,5,101,
        0,0,77,78,5,110,0,0,78,79,5,102,0,0,79,80,5,111,0,0,80,81,5,114,
        0,0,81,82,5,99,0,0,82,83,5,101,0,0,83,8,1,0,0,0,84,85,5,97,0,0,85,
        86,5,110,0,0,86,87,5,121,0,0,87,10,1,0,0,0,88,89,5,116,0,0,89,90,
        5,114,0,0,90,91,5,117,0,0,91,92,5,101,0,0,92,12,1,0,0,0,93,94,5,
        102,0,0,94,95,5,97,0,0,95,96,5,108,0,0,96,97,5,115,0,0,97,98,5,101,
        0,0,98,14,1,0,0,0,99,100,5,101,0,0,100,101,5,110,0,0,101,102,5,100,
        0,0,102,16,1,0,0,0,103,104,5,58,0,0,104,18,1,0,0,0,105,106,5,44,
        0,0,106,20,1,0,0,0,107,108,5,40,0,0,108,22,1,0,0,0,109,110,5,41,
        0,0,110,24,1,0,0,0,111,112,5,123,0,0,112,26,1,0,0,0,113,114,5,125,
        0,0,114,28,1,0,0,0,115,116,5,46,0,0,116,30,1,0,0,0,117,118,5,91,
        0,0,118,32,1,0,0,0,119,120,5,93,0,0,120,34,1,0,0,0,121,122,5,64,
        0,0,122,36,1,0,0,0,123,124,5,61,0,0,124,38,1,0,0,0,125,126,5,33,
        0,0,126,40,1,0,0,0,127,128,5,105,0,0,128,129,5,115,0,0,129,130,5,
        95,0,0,130,131,5,100,0,0,131,132,5,101,0,0,132,133,5,115,0,0,133,
        134,5,116,0,0,134,135,5,114,0,0,135,136,5,117,0,0,136,137,5,99,0,
        0,137,138,5,116,0,0,138,139,5,105,0,0,139,140,5,118,0,0,140,141,
        5,101,0,0,141,42,1,0,0,0,142,143,5,105,0,0,143,144,5,110,0,0,144,
        145,5,118,0,0,145,146,5,111,0,0,146,147,5,107,0,0,147,148,5,101,
        0,0,148,149,5,95,0,0,149,150,5,97,0,0,150,151,5,99,0,0,151,152,5,
        116,0,0,152,153,5,105,0,0,153,154,5,111,0,0,154,155,5,110,0,0,155,
        44,1,0,0,0,156,157,5,117,0,0,157,158,5,115,0,0,158,159,5,101,0,0,
        159,160,5,114,0,0,160,161,5,95,0,0,161,162,5,105,0,0,162,163,5,110,
        0,0,163,164,5,115,0,0,164,165,5,112,0,0,165,166,5,101,0,0,166,167,
        5,99,0,0,167,168,5,116,0,0,168,169,5,105,0,0,169,170,5,111,0,0,170,
        200,5,110,0,0,171,172,5,108,0,0,172,173,5,108,0,0,173,174,5,109,
        0,0,174,175,5,95,0,0,175,176,5,115,0,0,176,177,5,101,0,0,177,178,
        5,108,0,0,178,179,5,102,0,0,179,180,5,95,0,0,180,181,5,114,0,0,181,
        182,5,101,0,0,182,183,5,102,0,0,183,184,5,108,0,0,184,185,5,101,
        0,0,185,186,5,99,0,0,186,200,5,116,0,0,187,188,5,115,0,0,188,189,
        5,116,0,0,189,190,5,111,0,0,190,200,5,112,0,0,191,192,5,110,0,0,
        192,193,5,111,0,0,193,194,5,110,0,0,194,200,5,101,0,0,195,196,5,
        115,0,0,196,197,5,107,0,0,197,198,5,105,0,0,198,200,5,112,0,0,199,
        156,1,0,0,0,199,171,1,0,0,0,199,187,1,0,0,0,199,191,1,0,0,0,199,
        195,1,0,0,0,200,46,1,0,0,0,201,203,7,0,0,0,202,201,1,0,0,0,203,204,
        1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,
        6,23,0,0,207,48,1,0,0,0,208,212,7,1,0,0,209,211,7,2,0,0,210,209,
        1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,50,1,
        0,0,0,214,212,1,0,0,0,215,219,5,34,0,0,216,218,9,0,0,0,217,216,1,
        0,0,0,218,221,1,0,0,0,219,220,1,0,0,0,219,217,1,0,0,0,220,222,1,
        0,0,0,221,219,1,0,0,0,222,223,5,34,0,0,223,52,1,0,0,0,224,226,7,
        3,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,228,1,
        0,0,0,228,54,1,0,0,0,229,231,7,3,0,0,230,229,1,0,0,0,231,232,1,0,
        0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,238,5,46,
        0,0,235,237,7,3,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,
        0,0,238,239,1,0,0,0,239,248,1,0,0,0,240,238,1,0,0,0,241,243,5,46,
        0,0,242,244,7,3,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,
        0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,230,1,0,0,0,247,241,1,0,
        0,0,248,56,1,0,0,0,10,0,199,204,212,219,227,232,238,245,247,1,6,
        0,0
    ]

class AgentSpecLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    RULE = 1
    TRIGGER = 2
    CHECK = 3
    ENFORCE = 4
    ANY = 5
    TRUE = 6
    FALSE = 7
    END = 8
    COLON = 9
    COMMA = 10
    LPAREN = 11
    RPAREN = 12
    LBRACE = 13
    RBRACE = 14
    DOT = 15
    LBRACK = 16
    RBRACK = 17
    AT = 18
    EQ = 19
    NOT = 20
    PREDICATE = 21
    INVOKE = 22
    ENFORCEMENT = 23
    WS = 24
    IDENTIFIER = 25
    STRING = 26
    INTEGER = 27
    FLOAT = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'rule'", "'trigger'", "'check'", "'enforce'", "'any'", "'true'", 
            "'false'", "'end'", "':'", "','", "'('", "')'", "'{'", "'}'", 
            "'.'", "'['", "']'", "'@'", "'='", "'!'", "'is_destructive'", 
            "'invoke_action'" ]

    symbolicNames = [ "<INVALID>",
            "RULE", "TRIGGER", "CHECK", "ENFORCE", "ANY", "TRUE", "FALSE", 
            "END", "COLON", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "DOT", "LBRACK", "RBRACK", "AT", "EQ", "NOT", "PREDICATE", "INVOKE", 
            "ENFORCEMENT", "WS", "IDENTIFIER", "STRING", "INTEGER", "FLOAT" ]

    ruleNames = [ "RULE", "TRIGGER", "CHECK", "ENFORCE", "ANY", "TRUE", 
                  "FALSE", "END", "COLON", "COMMA", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "DOT", "LBRACK", "RBRACK", "AT", "EQ", 
                  "NOT", "PREDICATE", "INVOKE", "ENFORCEMENT", "WS", "IDENTIFIER", 
                  "STRING", "INTEGER", "FLOAT" ]

    grammarFileName = "AgentSpec.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


